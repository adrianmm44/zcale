/////////////////////////////////////////////////////////////////////////////////////////////////////////

package hxflib.codeCrawler.registry;

import hxf.core.tools.PathTools;
import hxflib.codeCrawler.registry.CodeRegistry;
import hxflib.codeCrawler.elements.Module;

class ModulesRegistry
{
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	public var current( get, null ) : Module;
	
	private var parsingModules 	  : Array<Module>;
	private var registeredModules : Map<String,Module>;
		
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public function new()
	{
		parsingModules 	  = new Array();
		registeredModules = new Map();
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public function openModule( module : Module ) : Void
	{
		parsingModules.push( module );
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public function registerModule( modulePath : String ) : Void
	{
		registeredModules.set( modulePath, null ); // value null because it's only for temporary registration
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public function closeModule() : Void
	{
		var module : Module = parsingModules.pop();
		
		registeredModules.set( module.path, module );
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public function moduleExists( modulePath : String ) : Bool
	{
		/*/
		var exists : Bool = registeredDocuments.exists( classPath );
		
		if( exists == false )
		{
			var firstDir : String = PathTools.firstDirectory( classPath, "." );

			for( lib in haxeLibraries )
			{
				if( lib == firstDir ){
					exists = true;
					break;
				}
			}
		}
		
		return exists;
		/*/
		return registeredModules.exists( modulePath );
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	private function get_current() : Module
	{
		return parsingModules[ parsingModules.length - 1 ];
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public function getModules() : Map<String,Module>
	{
		return registeredModules;
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////