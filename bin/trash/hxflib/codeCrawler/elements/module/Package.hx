/////////////////////////////////////////////////////////////////////////////////////////////////////////

package hxflib.codeCrawler.elements.module;

import hxf.core.tools.ClassTools;
import hxflib.codeCrawler.CodeElement;
import hxflib.codeCrawler.interfaces.ICodeElement;

class Package extends CodeElement implements ICodeElement
{	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public var packagePath : String = "";
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public function new( reg : Dynamic )
	{
		super( this, reg, "package" );
		
		this.closeChar = ";";
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public function newInstance() : ICodeElement
	{
		return new Package( registry );
	}
		
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public function tryToParse() : Void
	{
		var str : String = modules.current.code.read( keyword.length );
		
		if( str == keyword ){
			modules.current.code.index += modules.current.code.endIndexOf( keyword );
			
			parsePackage();
		}
		else {
			dispatchEvent( eventType().parseNot );
		}
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	private function parsePackage() : Void // packagePath still needs to be checked for type errors
	{
		packagePath = modules.current.code.readWord(";");
		
		modules.current.pkg = this;
		modules.current.code.index += modules.current.code.endIndexOf( packagePath );
		
		dispatchEvent( eventType().parsePackage );
		
		endParse();
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public override function toString() : String
	{
		return "\n" + keyword + " " +  packagePath + ";";
	}
		
	/////////////////////////////////////////////////////////////////////////////////////////////////////
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////