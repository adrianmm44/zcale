	/////////////////////////////////////////////////////////////////////////////////////////////////////////

package hxf.core.registry;

import hxf.core.Registry;
import hxf.core.registry.ObjectVars;
//import hxf.core.registry.Location;
import hxf.core.registry.Scripts;

typedef BootingInfo = {
	completed : Bool
}

typedef TargetInfo = {
	?directory : String,
	?extension : String
}

class RegistryBase 
{
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public var target 	  	 : TargetInfo;
	public var booting 	  	 : BootingInfo;
	//public var scripts 	  	: Scripts;
	//public var dependencies : Dependencies;
	public var objectvars 	 : ObjectVars;
	
	public var location   	 : Location;
	//public var modules 		: Map<String,Bool>;
	
	public var loadedScripts : Map<String,String>;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public function new( reg : Registry )
	{
		target  	  = {};
		booting 	  = { completed : false };		
		//scripts	   	 = new Scripts(  reg );
		//dependencies = new Dependencies();
		objectvars 	  = new ObjectVars();		
		location   	  = new Location( reg );
		loadedScripts = new Map();
		//modules		 = new Map();
		
		location.update();
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
/*/
class Dependencies 
{
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	private var dependencies : Array<String>;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public function new()
	{
		dependencies = new Array();
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public function add( classPath : String ) : Void
	{
		dependencies.push( classPath );
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
}
/*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////