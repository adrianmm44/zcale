/////////////////////////////////////////////////////////////////////////////////////////////////////

package zcale.core.events;

using Reflect;

typedef ErrorData = {
		crumbs     	: Array<ErrorCrumb>,
		?classPath  : String,
		?methodName : String,		
		?message    : String
}

typedef ErrorCrumb = { 
		classPath  : String, 
		methodName : String 
}

@:expose

class AsyncData extends EventData
{
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public var error : ErrorData;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public function new()
	{
		error = { crumbs : [] };
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public static function toObject( eventData : AsyncData ) : Dynamic
	{
		var object : Dynamic = {};
		
		for( fieldName in eventData.fields() )
		{
			 object.setField( fieldName, eventData.field( fieldName ));
		}				
		return object;
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public static function fromObject( eventData : AsyncData,  object : Dynamic ) : Void
	{
		for( fieldName in object.fields() )
		{
			 eventData.setField( fieldName, object.field( fieldName ));
		}
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////