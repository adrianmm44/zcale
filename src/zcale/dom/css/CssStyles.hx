/////////////////////////////////////////////////////////////////////////////////////////////////////////

package zcale.dom.css;

import sys.io.File;
import haxe.ds.StringMap;
import zcale.dom.css.Style;
import zcale.core.Path;

using zcale.PathTools;

class CssStyles
{
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	private var classPath : String;
	private var styles 	  : StringMap<Style>;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public function new( classPath : String )
	{
		this.classPath = classPath.toDirPath().removeFirstDirectory();
		
		styles = new StringMap();
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public function set( selector : String, style : Style ) : Void
	{
		styles.set( selector, style );
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
		
	public function setById( id : String, style : Style ) : Void
	{
		styles.set( "#" + id, style );
	}
	
	public function getById( id : String ) : Style
	{
		return styles.get( "#" + id );
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public function render() : String
	{
		var  str = "";
		for( key in styles.keys() )
		{
			str += "\n\t";
			/*/
			if( data.useIndenting == true ){
				str += "\n\t\t";
			}
			/*/
			str += key + "{" + styles.get( key ).render() + "}";
		}
		return str;
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	public function toFile() : Void
	{
		File.saveContent( Path.rootPath + classPath, render() );
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////